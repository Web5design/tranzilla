<?php

/**
 * @file
 * Implements Authorize.Net payment services for use in Drupal Commerce.
 */


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_tranzilla_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['tranzilla'] = array(
    'base' => 'commerce_tranzilla',
    'title' => t('Tranzilla - Credit Card'),
    'short_title' => t('Tranzilla CC'),
    'display_title' => t('Credit card'),
    'description' => t('Integrates Tranzilla Payment Gateway'),
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_tranzilla_settings_form($settings = NULL) {
  $form = array();
 
  $form['supplier'] = array(
    '#type' => 'textfield',
    '#title' => t('Supplier'),
    '#description' => t('Your Supplier Login, Provided by Tranzilla'),    
    '#required' => TRUE,
  );
  $form['system'] = array(
    '#type' => 'select',
    '#title' => t('Tranzilla System'),
    '#description' => t('Tranzilla URL'),
    '#options' => array(
     'secure5.tranzila.com' => t('Secure5.Tranzila.com'),
     'secure.tranzila.com' => t('Secure.Tranzila.com'),
    ),
    '#default_value' => variable_get('uc_tranzila_system', 'secure5.tranzila.com'),
    '#required' => TRUE,
  );
  $form['transactions'] =array (
    '#type' => 'select',
    '#title' => t('Installments'),
    '#description' => t('Maxiumum Number of Installments. Selecting 1 will not display the form for the users.'),
    '#options' => array (1,2,3,4,5,6,7,8,9,10,11,12),
    '#default_value' => 1,
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_tranzilla_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  return commerce_payment_credit_card_form(array('code' => '', 'owner' => ''));
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_tranzilla_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );

  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_tranzilla_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // Build a name-value pair array for this transaction.
  $nvp = array(
    'cred_type' => 1,
    'supplier' => $payment_method['settings']['supplier'],
    'sum' => commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']),
    'ccno'=> $pane_values['credit_card']['number'],
    'expmonth' => $pane_values['credit_card']['exp_month'],
    'expyear' => substr($pane_values['credit_card']['exp_year'],2,2),
    'mycvv' => $pane_values['credit_card']['code'],
    'currency' => $charge['currency_code'],
    'order_id' => $order->order_id,
  
  );
  
  
 
  // Submit the request to Tranzilla
  $response = commerce_tranzilla_request($payment_method, $nvp);

  // Prepare a transaction object to log the API response.
  $transaction = commerce_payment_transaction_new('tranzilla', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  //$transaction->remote_id = $response[6];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->payload[REQUEST_TIME] = "";

  //dpm ($response, "response");
  $resp_hash = array();
    foreach(explode('&', $response->data) as $r) {
     list($key, $value) = explode("=", $r);
     $resp_hash[$key] = $value;
  }
  

  if($resp_hash['Response'] != "000") {
    // Error.
    // Create a failed transaction with the error message.
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  else {
     $transaction->remote_id = $resp_hash['TransID'];    
     $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  }
    

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);

  // If the payment failed, display an error and rebuild the form.
  if ($resp_hash['Response'] != "000") {
     $error = commerce_tranzilla_error_message($resp_hash['Response']);
    drupal_set_message(t('There was an error processing the transaction for order @order_id.<br />Full response from server: @response', array('@order_id' => $order->order_id, 
    '@response' => $error)), 'error');
    return FALSE;
  }
  else {
    drupal_set_message(t('Credit card payment processed successfully.'), 'success');

  }
}

/**
 * Submits an  request to Tranzilla
 *
 * @param $payment_method
 *   The payment method instance array associated with this API request.
 */
function commerce_tranzilla_request($payment_method, $nvp = array()) {
  // Get the API endpoint URL for the method's transaction mode.
  $get_url = 'https://'.$payment_method['settings']['system'].'/cgi-bin/tranzila31.cgi';
  $get_fields = array();
  foreach ($nvp as $key => $value) {
    // Replace spaces with %20, so URL will be valid.
    $get_fields[] = $key .'='. str_replace(' ', '%20', $value);
  }
  //dpm($get_fields, "get fields");
  //dpm($get_fields);
  $respose = drupal_http_request($get_url .'?'. implode('&' ,$get_fields));
  return $respose;

}

function commerce_tranzilla_error_message($error_code)  {
    $lang = array(
      'ccerror004' => t('Credit Card was declined'),
      'ccerror006' => t('CVV Number is invalid'),
      'ccerror033' => t('Credit Card Number is invalid'),
      'ccerror036' => t('Credit Card expired'),
      'ccerror057' => t('Please specify credit card number'),
      'ccerror062' => t('Transaction type is invalid'),
      'ccerror063' => t('Transaction Code is invalid'),
      'ccerror064' => t('Credit card type is not supported'),
      'ccerror065' => t('Currency type is invalid'),
    );

        switch($error_code)
        {
            case '004':
                return $lang['ccerror004'];
                
                break;
            case '006':
            case '017':
            case '058':
            case '059':
                return $lang['ccerror006'];
                
                break;
            case '033':
                return $lang['ccerror033'];
                
                break;
            case '036':
                return $lang['ccerror036'];
                
                break;
            case '057':
            case '059':
                return $lang['ccerror057'];
                
                break;
            case '062':
                return $lang['ccerror062'];
                
                break;
            case '063':
                return $lang['ccerror063'];
                
                break;
            case '064':
                return $lang['ccerror064'];
                
                break;
            case '065':
                return $lang['ccerror065'];
                
                break;

            case '000':
                return true;
                break;

            default:
                return $lang['ccerror004'];
                break;
        }

        
}